<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" []>
<chapter>
  <title>DHIS2 Implementation Guide</title>
  <abstract>
    <para>DHIS2 is a modern, robust and comprehensive information management platform developed globally  tailored to the collection of aggregate statistical data. This document will provide a high-level overview of the various steps that will be required to implement DHIS2 at the country level. 
The document is intended primarily for  consultants who will be responsible for the initial configuration of DHIS2 for a given country or organization.  While this document attempts to identify the most important points to consider when planning an implementation, there are many circumstances in a particular country that are impossible to anticipate. With that in mind, this document should be used as the basis to plan and execute a DHIS2 deployment, but should by no means be regarded as comprehensive. Other factors (political, human, or technical) that may not be included in this document, but that may be deemed to be important by the person(s) planning the implementation, should always be considered, and are usually highly specific to each country’s situation. . Significant planning, stakeholder consultation, and resources will be required in order to implement and maintain such an information system.  Careful planning and resource allocation will help to mitigate the risk of deployment. 
The initial stages of planning and deployment are crucial in order to acheive a functional system. </para>
  </abstract>
  <section>
    <title>Readiness asessment</title>
    <section>
      <title>Stakeholders forum</title>
      <para>There are many factors that influence the successful establishment of an health management information system: technical, political and human. Understanding the requirements of key stakeholders prior to an technical work being performed is crucial in order to ensure the sustainability of the HMIS. DHIS2 has often been implemented with the assistance of external consultants, who may be present in a given country for a short period of time. In many cases, they may not understand all of the requirements of different parties that are part of the HMIS. It is therefore crucial that a HMIS working group be established, and clearly define the overall requirements of the HMIS, prior to any technical consultations being carried out. </para>
      <para>Typically, the HMIS working group would be composed of different stakeholders who have different interests in the system. <itemizedlist>
          <listitem>
            <para>Ministry of Health: Typically the key client and driver of the HMIS. In some countries, the Minsitry may be responsible for oversight, in other countries they may be direct service providers. </para>
          </listitem>
          <listitem>
            <para>Central Statistics Office or its equivalent:  Indicators are often based on population figures, which are typically supplied by the CSO or its equivalent. In many countries, the MoH is responsible for the submission of a yearly report to the CSO on the health sector. Good coordination between these two bodies is crucial to ensure that population figures are up to date and accurate, and that the data supplied to the CSO by the MoH satisfies the needs of the national statistical system. </para>
          </listitem>
          <listitem>
            <para>Key non-governmental agencies, that typically supply data on programmatic interventions. Examples would be faith-based organisations (FBOs) who in many countries offer health related services and who often report to the MoH on their activities. </para>
          </listitem>
          <listitem>
            <para>UN Agencies (WHO, UNICEF, UNAIDS). The MoH is usually responsible to report to the UN agencies on various statistics. The UN agencies can often offer technical support and provide advice on international norms and standards for the establishment or reform of an HMIS. </para>
          </listitem>
          <listitem>
            <para>Other governmental bodies that may offer health related services. The National HIV/AIDS Commission ( or its equivalent) often monitors or implements services such as home-based care and anti-retroviral treatment programmes. There is often overlap between the MoH and the NAC, and therefore close cooperation should be estabslished to ensure a proper data flow. </para>
          </listitem>
          <listitem>
            <para>Donor agencies and other cooperating partners. In many countries, donors regularly request information related to the health sector from the MoH. Additionally, some bilateral organisations, e.g. USAID/CDC, may be implementing programmes in countries which support health related services. </para>
          </listitem>
        </itemizedlist></para>
      <para>Other organisations such as private sector enterprises with HIV/AIDS workplace programs, private sector health care providers, non-governmental organizations involved in health care, etc.  should be considered. The HMIS working group can help to establish the overall scope of the information management system, key indicators, frequency (monthly, quarterly, annually) of data collection, as well as the geographical (e.g. national, provincial, district, facility) and organizational (single versus multiple) hierarchy that should be part of the HMIS. 
</para>
    </section>
  </section>
  <section>
    <title>Compiling DHIS2</title>
    <para>First, create an environment variable called <envar>JAVA_OPTS</envar>, and set its value to: <parameter>-Xms128m -Xmx512m -XX:PermSize=128m -XX:MaxPermSize=512m</parameter> . In addition to this environment variable, you will need to ensure that maven is accessible through your console. </para>
    <para>A sample Windows batch script is provided below. There are two seperate steps during the build process: 1) Building the DHIS2 core modules 2) Building the DHIS2 Web modules and portal.</para>
    <para><literallayout><computeroutput>set start_time=%time% echo Building DHIS 2 Core cd trunk\dhis-2\ call mvn clean install -Dtest=skip -DfailIfNoTests=false echo Building DHIS 2 Web cd dhis-web call mvn clean install -Dtest=skip -DfailIfNoTests=false echo start %start_time% echo finish %time%</computeroutput> </literallayout></para>
    <para>A sample Linux build script is provided below. </para>
    <para><literallayout><computeroutput>#!/bin/sh echo &quot;Building DHIS 2 Core...&quot; cd dhis/trunk/dhis-2 mvn clean install -Dtest=skip -DfailIfNoTests=false echo &quot;Building DHIS 2 Web...&quot; cd dhis-web mvn clean install -Dtest=skip -DfailIfNoTests=false </computeroutput></literallayout></para>
    <para>Both of these scripts have been included in the <filename>/dhis2/dhis2/dhis2-live-installer</filename> directory. Review the <filename>INSTALLER-README.txt</filename> file for more details of these build scripts and their functionality.</para>
    <para>The first time you execute the build process, maven will need to download a number of required components. You must therefore have an active internet connection. Depending on the speed of your connection and computer, the build process could take a significant amount of time. </para>
    <para>The resulting web archive file (war)  is located in <filename>dhis2/dhis-2/dhis-web/dhis-web-portal/target/dhis.war</filename> . This file should be copied to your Tomcat&apos;s <filename>/webapps</filename> directory. </para>
  </section>
  <section>
    <title>Deployment architecture</title>
    <para>Broadly speaking, there are three way to deploy DHIS2: a single, standalone system, multiple standalone systems which exchange data through XML, and a server system that serves multiple clients through the Internet. There are varations on each of these three main architectures. Determining an deployment architecture is critical to ensure the long-term sustainability of DHIS2 in a given enviornment. Having a server-client architecture in a country with poor Internet infrastructure would be an inapproriate choice for instance. Several differnent scenarios will be discussed here, but will require modification for each deployment. </para>
    <section>
      <title>Determining an architecture</title>
      <para>DHIS2 is a server-client application that is capable of scaling from a single-desktop installation, to a multi-tiered clustered application capable of serving many clients at the same time.  The deployment architecture of DHIS2 will determine how the application is deployed in a given situation, and how different instances of DHIS2 will interact with each other. Several typical deployment architectures will be described in this section.  The determination of an approrpriate architecture is critical in order to meet the needs of the end-users, and it typically constrained by the level of available technical and finanacial resources for a given deployment. It should be noted that the deployment architecture may need to evolve over the course of an implementation. It is important to consider other systems that need to interact with the HMIS, such as patient record systems, logistical information systems, human resource information systems, financial management systems, etc. </para>
    </section>
    <section>
      <title>Internet server for multiple clients</title>
      <para>In this scenario, a single server will be used by multiple clients that connect to the server via the Internet. This deployment scenario is probably the simplest of all to setup, besides the single-user desktop installation. In a typical scenario, a sinlge standard server-class machine would be used. DHIS2 would run with Apache Tomcat with either MySQL or Postgresql database backend. The administrator would be responsible for specification of the different user roles, and the provision of logins for each user, depending on their role. </para>
      <para>Of course, depending on the actual number of clients that will be simultaneously accessing the application, multiple load-balanced servers accessing a clustered database may be more appropriate. DHIS2, like many database driven applications, tend to be constrained in terms of disk input/output. A common strategy for alleviating this constraint is the use of a clustered database. Both Postgresql and MySQL support database clustering. Essentially, a database cluster acts for all intents and purposes as a single database, but appears to the application accessing the database as as a single instance. There are many different scenarios that are capable of acheiving a clustered database with either MySQL or Postgres , but are beyond the scope of this article to consider. It should be mentioned that database replication, while seemingly easy to implement, requires considerable database administration experience, and should only be considered when high availability and large numbers of users will be encountered.  </para>
      <para>For this type of architecture, a server class machine running some distribution of Linux (Debian, Ubuntu, Suse, etc) is reccomended. Java applications tend to perform better on Linux based machines. As DHIS2 is a database driven application, a key consideration is whether to run the database on the same machine as the application server. Ideally, the database and application servers would be on seperate machines, connected through a fiber or SAN. In many key DHIS2 markets however, this type of technology is either not available or prohibitively expensive. Usually therefore, the database (Postgresql or MySQL) and application server (typically Apache Tomcat) would reside on the same machine. </para>
    </section>
    <section>
      <title>LAN server</title>
      <para>DHIS2 is server-client software so can easily scale up to a networked
system when needed. For example, a district office with five computers
can have a local network with DHIS2 installed on only one machine. Program officers, manages, and data entry personell can access it over the local network. This  deployment scenario does not require
Internet either, just cables or a wireless access point. This
approach is used for districts in Tanzania and Sierra Leone. In
addition, DHIS2 can run on Linux to avoid viruses and reduce
maintenance. The other computers in the building can run Windows and
access the DHIS2 local server to enter data, run validation, reports,
view maps etc. in their local browsers (Internet Explorer, Firefox
etc.), as well as analyse data in Excel pivot tables (connected to the
database on the local server). This means that the all health staff in
this office all work on the same database, which helps to synchronise
and integrate the data among programs and departments, and reduces the
need for DHIS maintenance to a single machine. Communication up to the
region/province or national would occur  through DXF export
files.</para>
    </section>
    <section>
      <title>Decentralised architecture</title>
      <para>The decentralized architecture typically consists of many standalone instances of DHIS2, which interchange data through the DXF data exchange format. In a typical deployment, a single DHIS2 instance will be installed a a peripheral adminstrative unit, such as the district. Each district will collect paper aggregate data reports from a number of facilities, and then enter these reports manually into the system on a regular basis. Data will then be transmitted, via DXF, to seperate installations at higher organizational levels, such as the province and national level. </para>
    </section>
    <section>
      <title>Which arcitecture should I choose?</title>
      <para>Oftentimes, some areas have adequate Internet connections and others
none at all. Therefore, the most common implementation scenario is a
combination of all three. In the case where  no
districts have sufficient Internet connection to access an online
national server, it makes sense for the MoH to set up such a national
DHIS server anyway to enable access to one common data repository for
all the health programs and other users of information at the national
level that often are connected to the server either through a local
network or over the Internet. If  at some point in time, some districts get a proper
connection they can start entering their data directly on this
national server and run their reports etc there (this happens in
Gujarat), while at the same time the other districts continue to send
their data via export files. In summary, there generally is no one solution and it will likely evolve over time as Internet access continues to improve. </para>
    </section>
  </section>
  <section>
    <title>Packaging and installation</title>
    <blockquote>
      <para>&quot;Building an installer is the last thing the developer does but the first thing the customer sees.&quot;</para>
      <para>Will Iverson, strategic partner manager for Symantec&apos;s Internet Tools Division.</para>
    </blockquote>
    <section>
      <title>Introduction</title>
      <para>DHIS2 is a browser-based Java application, and will therefore run on essentially any operating system that support Java. The application has been architected to run both on stand-alone laptops as well as servers intended for multi-user enviornments discussed in the previous sections. Creating a single installer for all of these types of deployments is a major challenge and must be carefully considered when rolling out DHIS2 within a given organization. In this section, the packaging of DHIS2 based on the BitRock InstallBuilder will be considered. The source code for these installers is included in the <filename>/dhis2/dhis2-live-installer</filename> directory of the main source code. </para>
    </section>
    <section>
      <title>Building the installer</title>
      <para>You will need a few extra components in order to build the BitRock installer. </para>
      <itemizedlist>
        <listitem>
          <para>A recent version of the Java SDK. </para>
        </listitem>
        <listitem>
          <para>Download a copy of <link xl:href="http://installbuilder.bitrock.com/download-step-2.html">BitRock InstallBuilder 6 Multiplatform (Professional).</link>. The install builder is available for multiple operating systems, so choose the one that is appropriate for you. The DHIS2 project has been granted a special liscense by BitRock for the use within the context of the project. Please send a note to the developers list if you want to build the installer, and a copy of the key required for the application will be sent to you. </para>
        </listitem>
        <listitem>
          <para>Apache Maven 2</para>
        </listitem>
        <listitem>
          <para>If you are planning to build an embedded installer (described below), you will need a recent copy of the Java Runtime Environment (JRE). More specific details wil be provided in the section below. </para>
        </listitem>
      </itemizedlist>
      <para>Once you have downloaded and installed all the necessary components, you will need to make some changes to the environment variables that are defined in the build.sh script (or build.bat script if you are using Windows). </para>
      <itemizedlist>
        <listitem>
          <para><command>export <envar>JAVA_HOME</envar>=/usr/share/java/jdk1.6.0_19/</command></para>
          <para>This should point to the path where your local copy of the Java SDK exists. If this has been define else where on your system, you can comment this line out.</para>
        </listitem>
        <listitem>
          <para><command>export <envar>PATH</envar>=$<envar>PATH</envar>:/home/jason/apache-maven-2.2.1/bin/</command></para>
          <para>This command will add the Apache Maven binary to the current path. If Maven is is accessible on the current enviornment, you can comment out this line.</para>
        </listitem>
        <listitem>
          <para><command>export <envar>BITROCK_HOME</envar>=/home/jason/installbuilder-6.3.1/</command></para>
          <para>This command will define an enviornment variable which should point to the directory where the BitRock Installer Professional has been downloaded to. </para>
        </listitem>
        <listitem>
          <para><command>export <envar>DHIS2_DOCS</envar>=&quot;/home/jason/dhis2/dhis2-docbook-docs/&quot;</command></para>
          <para>This environment variable will be used by the build script to automatically build the DHIS2 documentation and should point to the documentation source directory.</para>
        </listitem>
        <listitem/>
        <listitem/>
      </itemizedlist>
    </section>
    <section/>
  </section>
  <section>
    <title>Configuration</title>
    <section>
      <title>Organizational unit hierarchy</title>
    </section>
    <section>
      <title>Data elements</title>
    </section>
    <section>
      <title>Indicators</title>
    </section>
    <section>
      <title>GIS data</title>
    </section>
  </section>
  <section>
    <title>Migration from existing systems</title>
    <para/>
    <section>
      <title>Importing organizational units</title>
      <para>   1. Find IDs for all the orgunits at the lowest level (usually facilities). They often have codes, but that is not the ID (rather it is CODE). Generate suitable IDs for the ones at the higher levels. Add all the IDs to SOURCE. NOTE: In postgres the simplest thing would be to use the built-in ID sequence called hibernate_sequence. This provides a unique ID and is consistent with the other tables and rows in the database (which all get the IDs from this sequence). This hibernate_sequence might be available in other DBMSs as well, not sure. The sql command is on the type

      insert into XX values
      (nextval(&apos;hibernate_sequence&apos;,etc. etc.)
   2. Add the top node (e.g. National MoH) to ORGANISATIONUNIT. Make sure PARENTID is NULL and ACTIVE=TRUE
   3. Then add level 2 (e.g. provinces). All must have PARENTID=&lt;TOP_NODE_ID&gt;, a NAME(230), a SHORTNAME(25)  (both unique) and ACTIVE=TRUE. This can be a big job for shortname. One way to achieve this quickly is to initially just use the ID as shortname, but put the first 20 characters of the name in front. Not a good long term solution - the best is usually to take the core of the name and add a qualifier that distinguishes it from other facilities with the same core name. In the shortname, leave out the orgunit type (i.e. don&apos;t include &quot;Dispensiary&quot;, &quot;Medical Clinic&quot; etc in the shortname).
   4. Proceed similarly for levels 3 and on, but always pay attention to the PARENTID
   5. Create names for each Organisation Unit Level in DHIS2
   6. IMPORTANT: SOURCE and ORGANISATIONUNIT must always be synchronized, otherwise you will have problems with datamarts (e.g. if there is an extra ID in SOURCE)</para>
    </section>
    <section>
      <title>Importing data elemens</title>
      <para>1.      Add a default element with CATEGORYCOMBOID in CATEGORYCOMBO

2.      Each data element must have a NAME(230), a SHORTNAME(25) and ACTIVE=TRUE. Both must be unique. Also, it musth have a VALUETYPE=&quot;int&quot; DOMAINTYPE=&quot;aggregate&quot;, AGGREGATIONTYPE=&quot;sum&quot; and CATEGORYCOMBOID as in step 1.

3.      We now need at least a default CATEGORYOPTIONCOMBOID. If you have multidimensional data (e.g. broken down by age group or sex), you need to create the corresponding categories. This is best done in the DHIS2 GUI

4.      Add in DATAELEMENTGROUP - NAME, ID and optional CODE

5.      Add DATAELEMENTGROUPMEMBERS - two IDs

6.      Add DATASET - ID, NAME and SHORTNAME(60). Requires a PERIODTYPEID from PERIODTYPE (e.g. 6 for monthly, 9 for yearly). (and LOCKED =&quot;0&quot; ??)

7.      DATASETMEMBERS - two IDs

8.      DATASETSOURCE - two IDs. However note that it easy to assign datasets to all orgunits at a level inside DHIS2. Often, one wants a kind of cartesian product, e.g. SELECT datasetid, organisationunitid FROM dataset, organisationunit WHERE organisationunitid&lt;1000</para>
    </section>
    <section>
      <title>Importing indicators</title>
      <para>   1. INDICATORTYPE - just make a DEFAULT with FACTOR=1
   2. INDICATOR - ID, NAME(230), SHORTNAME(25), INDICATORTYPE (default), NUMERATOR must be on the form [DATAELEMENTID.CATEGORYOPTIONCOMBOID],dataelement shortname as NUMERATORDESCRIPTION (Why do we require this in the GUI?), DENOMINATOR=1, &quot;One&quot; as DENOMINATORDESCRIPTION (Why required in GUI?). It can be smart to set the numeratoraggregationtype and denominatoraggregationtype to &quot;sum&quot;
   3. INDICATORGROUP - perhaps same as DATAELEMENTGROUP ?
   4. INDICATORGROUPMEMBERS - can be similar to DATAELEMENTGROUPMEMBERS</para>
    </section>
    <section>
      <title>Importing data values</title>
      <para>1.      PERIOD - all fields

2.      For DATAVALUE you need these fields: DATAELEMENTID, PERIODID, SOURCEID,CATEGORYOPTIONCOMBOID and VALUE (Determine the needed CATEGORYOPTIONCOMBOIDs or just use the default one)</para>
    </section>
  </section>
  <section>
    <title>Case studies</title>
    <section>
      <title>India metadata handling experience</title>
      <para>35 server instances (one per state) on 7 physical servers Kerala works both online and offline 2000 PHCs. Problem with version control for the database content - how to synchronize thousands of offline installations. HMIS committee at state level - control changes to happen only once a year, releasing versioned  metadata lists.

Different states have different data elements (in addition to the nationally defined ones).

Versioned document for each state published on NHSRC portal: “Data Element definition and guide for use” containing level, frequency, guide for use and definition, as well as group. Dimensions are not created unless they are shared between several data elements. Currently, breakdowns by dimensions are not included in the document.

Problem with DHIS2 that everyone sees all data elements defined by anyone - and no concept of ownership of data elements (or indicators).

What if one district has a different dimensional breakdown?

Strict control over the data elements: A change process where everyone updates centrally distributed database content versions and DHIS versions, including existing data. Everyone gets all data for the whole district. District has down to subcenter data. The online is just down to block level (State - District - Block).

District people are not allowed to change metadata and just exports aggregate data.

In Kerala, all PHCs have computers. From next month just online data entry.

8000 PHCs in Gujarat - the server cannot handle everyone entering data at once, so rotating weeks between districts. Batch process to generate all reports. Currently not using the datamart - as it used to take too long time. DB size is 3 GB and MySql cannot handle it. Server with 32 GB RAM. Lars: Data entry must be made more efficient. Needs expertise in clustering, load balancing and database optimization.

India has requested a system setting “Disallow updates on import”.
</para>
    </section>
    <section>
      <title>Zanzibar and Tanzania</title>
      <para>35 server instances (one per state) on 7 physical servers Kerala works both online and offline 2000 PHCs. Problem with version control for the database content - how to synchronize thousands of offline installations. HMIS committee at state level - control changes to happen only once a year, releasing versioned  metadata lists.

Different states have different data elements (in addition to the nationally defined ones).

Versioned document for each state published on NHSRC portal: “Data Element definition and guide for use” containing level, frequency, guide for use and definition, as well as group. Dimensions are not created unless they are shared between several data elements. Currently, breakdowns by dimensions are not included in the document.

Problem with DHIS2 that everyone sees all data elements defined by anyone - and no concept of ownership of data elements (or indicators).

What if one district has a different dimensional breakdown?

Strict control over the data elements: A change process where everyone updates centrally distributed database content versions and DHIS versions, including existing data. Everyone gets all data for the whole district. District has down to subcenter data. The online is just down to block level (State - District - Block).

District people are not allowed to change metadata and just exports aggregate data.

In Kerala, all PHCs have computers. From next month just online data entry.

8000 PHCs in Gujarat - the server cannot handle everyone entering data at once, so rotating weeks between districts. Batch process to generate all reports. Currently not using the datamart - as it used to take too long time. DB size is 3 GB and MySql cannot handle it. Server with 32 GB RAM. Lars: Data entry must be made more efficient. Needs expertise in clustering, load balancing and database optimization.

India has requested a system setting “Disallow updates on import”.
</para>
    </section>
    <section>
      <title>Sierra Leone</title>
      <para>From 2009 to 2010 they changed the dimensional breakdown of some data elements from by gender to by age group. This necessitated a huge database merging effort and parallel “2009” and “2010” database structures (because it takes time to get all reported data in from the previous year).

Another huge problem is keeping the orgunit hierarchy up to date and synchronizing it between installations. Orgunit names change, new units get created, and when old files get imported, old misspellings crop up again.
</para>
    </section>
    <section>
      <title>Zambia</title>
    </section>
  </section>
</chapter>
