<?xml version='1.0' encoding='UTF-8'?>
<chapter version="5.0"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd"
          xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xs="http://www.w3.org/2001/XMLSchema"
         xmlns:xl="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:xhtml="http://www.w3.org/1999/xhtml"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:mth="http://www.w3.org/1998/Math/MathML"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Getting started with DHIS 2</title>
  <section>
    <title>Using the DHIS 2 demo server</title>
    <para>The DHIS 2 team maintains a demonstration server at <link xl:href="https://play.dhis2.org/demo">https://play.dhis2.org/demo</link>. This is by far the easiest way to try out DHIS2. Simply open the link in your web browser and login with username = admin and password = district. </para>
    <note>
      <para>All changes on this server are deleted each night, so do not save any important work on this server. It is strictly for demonstration purposes on only!</para>
    </note>
  </section>
  <section xml:id="mod2_1">
    <title>Using the DHIS 2 live package</title>
    <section>
      <title>Starting the DHIS 2 Live package</title>
      <para>The DHIS 2 Live package is the easiest way to get started with DHIS2 on your local computer. DHIS2 Live is appropriate for a stand-alone  installation and demos.  Simply download the application from <link xl:href="http://www.dhis2.org/downloads">here</link>. 
        Once the file is downloaded,  you can simply double-click the downloaded file, and get started using DHIS 2. </para>
      <section>
        <title>Prerequisites for DHIS 2 Live</title>
        <para>You must be sure that you have a current version of the Java Runtime installed on your machine. Depending on your operating system, there are different ways of installing Java. The reader is referred to this <link xl:href="http://java.sun.com/javase/downloads/index.jsp">website</link> for detailed information on getting Java installed.</para>
      </section>
      <section>
        <title>Starting up with a blank database</title>
        <para>The live package comes with a demo database just like what you see on the <link xl:href="http://apps.dhis2.org/demo/">online demo</link> (which is based on the national Sierra Leone HMIS), and if you want to start with a blank system/database and build up your own system then you need to do the following:
</para>
        <para>1) Stop DHIS2 live if it is already running.  Right click on the tray icon  and select Exit.
The tray icon is  the green symbol on the bottom right of your screen (on Windows) which  should say&apos; DHIS 2 Server  running&apos;  when you hover your mouse pointer over the icon.</para>
        <para>2) Open the folder where the DHIS 2 live package is installed  and locate the folder called &quot;conf&quot;.
</para>
        <para>3) In conf/ open the file called &apos;hibernate.properties&apos; in a text editor (notepad or similar) and do the following modification:
locate the string &apos;jdbc:h2:./database/dhis2&apos; and replace the &apos;dhis2&apos; part with any name that you want to give to your database (e.g. dhis2_test).</para>
        <para>4) Save and close the hibernate.properties file.
</para>
        <para>5) Start DHIS 2 Live by double-clicking on the file dhis2-live.exe in the DHIS 2 Live installation folder or by using a desktop shortcut or menu link that you might have set up.
</para>
        <para>6) Wait for the browser window to open and the login screen to show, and then log in with username: admin and password: district
</para>
        <para>7) Now you will see a completely empty DHIS 2 system and you should start by adding your users, organisational hierarchy, data elements, and datasets etc. Please refer to the other sections of the user manual for instructions on how to do this.
</para>
      </section>
    </section>
    <section>
      <title>Downloading and installing the server version</title>
      <para>The latest stable server version can be downloaded from this <link xl:href="http://stable.dhis2.org/">website</link>. For detailed information on how to install it please refer to the installation chapter in the implementation manual.</para>
    </section>
  </section>
  <section xml:id="mod2_2">
    <title>Logging on to DHIS 2</title>
    <para>Regardless of whether you have installed the server version of the
    desktop Live version, you will use a web-browser to log on to the
    application. DHIS2 should be compatible with most modern web-browsers,
    although you will need to ensure that Java Script is enabled.</para>
    <para>To log on to the application just enter <link xl:href="http://localhost:8080/dhis">http://localhost:8080/dhis</link> if you
    are using the DHIS2 live package, or replace <varname>localhost</varname> with the name or IP
    address of the server where the server version is installed.</para>
    <para>Once you have started DHIS2, either on-line or off-line, the displayed
    screen will prompt you to enter your registered user-name and
password. After entering the required information click on log-in button
    to log into the application. The default user name and password are &apos;admin&apos; and &apos;district&apos;. They should be changed immediately upon logging on the first time.</para>
    <mediaobject>
      <imageobject>
        <imagedata width="40%" align="center" fileref="resources/images/getting_started/login.png" format="PNG"/>
      </imageobject>
    </mediaobject>
    <para>You can select the language which you wish to display DHIS2 in from the &quot;Change language&quot; dialog box at the bottom of the screen. Not all languages may be available. </para>
    <para>Should you have forgotten your password, you can click on the &quot;Forgot password?&quot; link. You must have informed DHIS2 of your email address and the server must be properly configured to send emails. </para>
    <para>If you want to create your own account (and the server administrator allows this), simply click &quot;Create an account&quot; and follow the directions provided. </para>
    <para>Once you have logged into DHIS2, refer to the specific sections in this manual for the different functionality which is available. </para>
  </section>
  <section xml:id="mod2_4">
    <title>Logging out of DHIS 2</title>
    <para>Just click on the Profile and the click &quot;Log out&quot; the top-right corner of the DHIS2 menu. </para>
  </section>
  <section xml:id="database_design">
    <title>Quick intro to designing a DHIS 2 database</title>
    <para>DHIS 2 provides a powerful  set of tools for data collection, validation, reporting and analysis, but the contents of the database, e.g. what to collect, who should collect it and on what format will depend on the context of use. However, in order to do anything with DHIS 2, you must first create meta-data. Meta-data, or data about the data, describes what should be collected (data elements and categories), where it should be collected (organisation units) and how frequently it should be collected (periods).  This meta-data needs to be created in the DHIS 2 database before it can be used. This  can be done through the user interface and requires no programming or in-depth technical skills of the software, but does require a good understanding of the processes which you are trying to collect data form. </para>
    <para>This section will provide a very quick and brief introduction to DHIS 2 database design and mainly explain the various steps needed to prepare a new DHIS 2 system for use. How to do each step is explained in other chapters, and best practices on design choices will be explained in the implementers manual. Here are the steps to follow:</para>
    <para>1. Set up an organisational hierarchy</para>
    <para>2. Define data elements</para>
    <para>3. Define data sets and data entry forms</para>
    <para>4. Define validation rules</para>
    <para>5. Define indicators</para>
    <para>6. Define report tables and design reports</para>
    <para>7. Set up the GIS module</para>
    <para>8. Design charts and customise the dashboard</para>
    <section>
      <title>The organisational hierarchy</title>
      <para>The organisational hierarchy defines the organisation using the DHIS 2, the health facilities, administrative areas and other geographical areas used in data collection and data analysis.  This dimension to the data is defined as a hierarchy with one root unit (e.g. Ministry of Health) and any number of levels and nodes below. Each node in this hierarchy is called an organisational unit in DHIS 2.</para>
      <para> The design of this hierarchy will determine the  geographical units of analysis available to the users  as data is collected and aggregated in this structure. There can only be one organisational hierarchy at the same time so its structure needs careful consideration. Additional  hierarchies (e.g. parallel administrative groupings such as &quot;Facility ownership&quot;) can be modelled using organisational groups and group sets, however the organisational hierarchy is the main vehicle for data aggregation on the geographical dimension. Typically national organisational hierarchies in public health have 4-6 levels, but any number of levels is supported. The hierarchy is built up of parent-child relations, e.g. a Country or MoH unit (the root) might have e.g. 8 parent units (provinces), and each province again ( at  level 2) might have 10-15  districts as their children. Normally the health facilities will be located at the lowest level, but they can also be located at higher levels, e.g. national or provincial hospitals, so skewed organisational trees are supported (e.g. a leaf node can be positioned at level 2 while most other leaf nodes are at level 5). </para>
      <para>Typically there is a geographical hierarchy defined by the health system. e.g. where the administrative offices are located (e.g. MoH, province, district), but often there are other administrative boundaries in the country that might or might not be added, depending on how its boundaries will improve data analysis.   When designing the hierarchy the number of children for any organisational unit may indicate the usefulness of the structure, e.g. having one or more  1-1 relationships between two levels is not very useful as the values will be the same for the child and the parent level. On the other extreme a very high number of children in the middle of the hierarchy (e.g. 50 districts in a province) might call for an extra level to be added in between  to increase the usefulness of data analysis. The lowest level, the health facilities will often have a large number of children (10-60), but for other levels higher up in the hierarchy approx. 5-20 children is recommended. Too few or too many children might indicate that a level should be removed or added.</para>
      <para> Note that it is quite easy to make changes to the upper levels of the hierarchy at a later stage, the only problem is changing organisational units that collect data (the leaf nodes), e.g.  splitting or merging health facilities. Aggregation up the hierarchy is done based on the current hierarchy at any time and will always reflect the most recent changes to the organisational structure. Refer to the chapter on Organisation Units to learn how to create organisational units and to build up the hierarchy.</para>
    </section>
    <section>
      <title>Data Elements</title>
      <para>The Data Element is perhaps the most important building block of a DHIS 2 database. It represents the &quot;WHAT&quot; dimension, it explains  what is being collected or analysed. In some contexts this is referred to an indicator, but in DHIS 2 we call this unit of collection and analysis a <emphasis role="italic">data element</emphasis>. The data element often represents a count of something,  and its name describes what is being counted, e.g. &quot;BCG doses given&quot; or &quot;Malaria cases&quot;. When data is collected, validated, analysed, reported or presented it is the data elements or expressions built upon data elements that describes the WHAT of the data. As such the data elements become important for all aspects of the system and they decide not only how data is collected, but more importantly  how the data values are represented in the database, which again decides how data can be analysed and presented. </para>
      <para>It is possible to add more details to this &quot;WHAT&quot; dimension through the disaggregation dimension called data element categories. Some common categories are Age and Gender, but any category can be added by the user and linked to specific data elements. The combination of a data element&apos;s name and its assigned category defines the smallest unit of collection and analysis available in the system, and hence describes the raw data in the database. Aggregations can be done when zooming out of this dimension, but no further drill-down is possible, so designing data elements and categories define the detail of the analysis available to the system (on the WHAT dimension). Changes to data elements and categories at a later stage in the process might be complicated as these will change the meaning of the data values already captured in the database (if any). So this step is one of the more decisive and careful steps in the database design process.</para>
      <para>One best practice when designing data elements is to think of data elements as a unit of data analysis and not just as a field in the data collection form. Each data element lives on its own in the database, completely detached from the collection form, and reports and other outputs are based on data elements and expressions/formulas composed of data elements and not the data collection forms. So the data analysis needs should drive the process, and not the look an feel of the data collection forms. A simple rule of thumb is that the name of the data element must be able to stand on its own and describe the data value also outside the context of its collection form. E.g.  a data element name like &quot;Total referrals&quot; makes sense when looking at it in either the &quot;RCH&quot; form or the &quot;OPD&quot; form, but on its own it does not uniquely describe the phenomena (who are being referred?), and should in stead be called &quot;Total referrals from Maternity&quot; or &quot;Total referrals from OPD&quot;. Two different data elements with different meanings, although the field on the paper form might only say &quot;Total referrals&quot; since the user of the form will always know where these referrals come from. In a database or a repository of data elements this context is no longer valid and therefore the names of the data elements become so important in describing the data.   </para>
      <para>Common properties of data elements can be modelled through what is called data element groups. The groups are completely flexible in the sense that they are defined by the user, both their names and their memberships. Groups are useful both for browsing and presenting related data, but can also be used to aggregate data elements together. Groups are loosely coupled to data elements and not tied directly to the data values which means they can be modified and added at any point in time without interfering with the raw data. </para>
    </section>
    <section>
      <title>Datasets and data entry forms</title>
      <para>All data entry in DHIS 2 is organised through the use of Datasets. A Dataset is a collection of data elements grouped together for data collection, and in the case of distributed installs they also define chunks of data for  export and import between instances of DHIS 2 (e.g. from a district office local installation to a national server). Datasets are not linked directly to the data values, only through their data elements and frequencies, and as such a dataset can be modified, deleted or added at any point in time without affecting the raw data already captured in the system, but such changes will of course affect how new data will be collected. </para>
      <para>A dataset  has a period type which controls the data collection frequency, which can be daily, weekly, monthly, quarterly, six-monthly, or yearly. Both which data elements to include in the dataset and the period type is defined by the user, together with a name, short name, and code.</para>
      <para>In order to use a dataset to collect data for a specific orgunit you must assign the orgunit to the dataset, and this mechanism controls which orgunits that can use which datasets, and at the same time defines the target values for data completeness (e.g. how many health facilities in a district expected to submit RCH data  every month). </para>
      <para>A data element can belong to multiple datasets, but this requires careful thinking as it may lead to overlapping and inconstant data being collected if e.g. the datasets are given different frequencies and are used by the same orgunits.  
</para>
      <section>
        <title>Data entry forms</title>
        <para>Once you have assigned a dataset to an orgunit that dataset will be made available in Data Entry (under Services) for the orgunits you have assigned it to and for the valid periods according to the dataset&apos;s period type. A default data entry form will then be shown, which is simply a list of the data elements belonging to the dataset together with a column for inputting the values. If your dataset contains data elements with categories such as age groups or gender, then additional columns will be automatically generated in the default form based on the categories. In addition to the default list-based data entry form there are two more alternatives, the section-based form and the custom form.</para>
        <section>
          <title>Section forms</title>
          <para>Section forms allow for a bit more flexibility when it comes to using tabular forms
            and are quick and simple to design. Often your data entry form will need multiple tables
            with subheadings, and sometimes you need to disable (grey out) a few fields in the table
            (e.g. some categories do not apply to all data elements), both of these functions are
            supported in section forms. After defining a dataset you can define it&apos;s sections
            with subsets of dataelements, a heading and possible grey fields i the section&apos;s
            table. The order of sections in a dataset can also be defined. In Data Entry you can now
            start using the Section form (should appear automatically when sections are available
            for the selected dataset). You can switch between default and section forms in the top
            right corner of the data entry screen. Most tabular data entry forms should be possible
            to do with sections forms, and the more you can utilise the section forms (or default
            forms) the easier it is for you. If these two types of forms are not meeting your
            requirements then the third option is the completely flexible, although more
            time-consuming, custom data entry forms.</para>
        </section>
        <section>
          <title>Custom Forms</title>
          <para>When the form you want to design is too complicated for the default or section forms then your last option is to use a custom form. This takes more time, but gives you full flexibility in term of the design. In DHIS 2 there is a  built in HTML editor (FcK Editor) for the form designer and you can either design the form in the UI or paste in your HTML directly using the Source window in the editor. In the custom form you can insert static text or data fields (linked to data elements + category) in any position on the form and you have complete freedom to design the layout of the form.   Once a custom form has been added to a dataset it will be available in data entry and used automatically. You can switch back to default and section (if exists) forms in the top right corner of the data entry screen. </para>
        </section>
      </section>
    </section>
    <section>
      <title>Validation rules</title>
      <para>Once you have set up the data entry part of the system and started to collect data then
        there is time to define data quality checks that help to improve the quality of the data
        being collected. You can add as many validation rules as you like and these are composed of
        left and right side expressions that again are composed of data elements, with an operator
        between the two sides. Typical rules are comparing subtotals to totals of something. E.g. if
        you have two data elements &quot;HIV tests taken&quot; and &quot;HIV test result
        positive&quot; then you know that in the same form (for the same period and organisational
        unit) the total number of tests must always be equal or higher than the number of positive
        tests. These rules should be absolute rules meaning that they are mathematically correct and
        not just assumptions or &quot;most of the time correct&quot;. The rules can be run in data
        entry, after filling each form, or as a more batch like process on multiple forms at the
        same time, e.g. for all facilities for the previous reporting month. The results of the
        tests will list all violations and the detailed values for each side of the expression where
        the violation occurred to make it easy to go back to data entry and correct the
        values.</para>
    </section>
    <section>
      <title>Indicators</title>
      <para>Indicators represent perhaps the most powerful data analysis feature of the DHIS 2. While data elements represent the raw data (counts) being collected the indicators represent formulas providing coverage rates, incidence rates, ratios and other formula-based units of analysis. An indicator is made up of a factor (e.g. 1, 100, 100, 100 000), a numerator and a denominator, the two latter are both  expressions based on one or more data elements. E.g. the indicator &quot;BCG coverage &lt;1 year&quot; is defined a formula with a factor 100, a numerator (&quot;BCG doses given to children under 1 year&quot;) and a denominator (&quot;Target population under 1 year&quot;). The indicator &quot;DPT1 to DPT3 drop out rate&quot; is a formula of 100 %   x (&quot;DPT1 doses given&quot;- &quot;DPT3 doses given&quot;) / (&quot;DPT1 doses given&quot;). </para>
      <para>Most report modules in DHIS 2 support both data elements and indicators and you can also combine these in custom reports, but the important difference and strength of indicators versus raw data (data element&apos;s data values) is the ability to compare data across different geographical areas (e.g. highly populated vs rural areas)  as the target population can be used in the denominator.</para>
      <para>Indicators can be added, modified and deleted at any point in time without interfering with the data values in the database. </para>
    </section>
    <section>
      <title>Report tables and reports</title>
      <para>Standard reports in DHIS 2 are a very flexible way of presenting the data that has been collected. Data can be aggregated by any organisational unit or orgunit level, by data element, by indicators, as well as over time (e.g. monthly, quarterly, yearly). The report tables are custom data sources for the standard reports and can be flexibly defined in the user interface  and later accessed in external report designers such as iReport or through custom HTML reports. These report designs can then be set up as easily accessible one-click reports with parameters so that the users can run the same reports e.g. every month when new data is entered, and also be relevant to users at all levels as the organisational unit can be selected at the time of running the report.</para>
    </section>
    <section>
      <title>GIS</title>
      <para>In the integrated GIS module you can easily display your data on maps, both on polygons
        (areas) and as points (health facilities), and either as data elements or indicators. By
        providing the coordinates of your organisational units to the system you can quickly get up
        to speed with this module. See the GIS section for details on how to get started. </para>
    </section>
    <section>
      <title>Charts and dashboard</title>
      <para>On of the easiest way to display your indicator data is through charts. An easy to use chart dialogue will guide you through the creation of various types of charts with data on indicators, organisational units and periods of your choice. These charts can easily be added to one of the four chart sections on your dashboard and there be made easily available right after log in. Make sure to set the dashboard module as the start module in user settings. </para>
    </section>
  </section>
</chapter>
